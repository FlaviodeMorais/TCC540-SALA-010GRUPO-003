/**
 * Servi√ßo para gerenciar a sincroniza√ß√£o agendada entre ThingSpeak e banco de dados local
 * 
 * Este servi√ßo garante que:
 * 1. Dados s√£o importados quando o servidor inicia
 * 2. Backup di√°rio dos dados do ThingSpeak √© realizado automaticamente
 * 3. Cada conex√£o com o ThingSpeak atualiza o banco de dados local
 */

import cron from 'node-cron';
import { syncThingspeakToDatabase } from '../syncDatabase';
import { log } from '../vite';
import { fetchLatestReading } from './thingspeakService';
import { storage } from '../storage';

class SyncSchedulerService {
  // Flag para controlar se a sincroniza√ß√£o inicial j√° foi executada
  private initialSyncComplete: boolean = false;
  
  // Configura√ß√£o dos jobs agendados
  private dailyBackupJob: cron.ScheduledTask | null = null;
  
  constructor() {
    // Inicializa√ß√£o
    log('üîÑ Inicializando servi√ßo de sincroniza√ß√£o agendada', 'sync');
  }
  
  /**
   * Inicia o servi√ßo de sincroniza√ß√£o
   */
  async initialize(): Promise<void> {
    try {
      // N√£o realizar importa√ß√£o inicial automaticamente, apenas quando solicitado
      // Para evitar sobrecarga do servidor durante o in√≠cio
      this.initialSyncComplete = true; // Marcar como conclu√≠da para evitar que execute automaticamente
      log('üîÑ Sincroniza√ß√£o inicial desativada para evitar sobrecarga do servidor', 'sync');
      
      // Configurar backup di√°rio √†s 03:00 da manh√£
      this.scheduleDailyBackup();
      
      // Configurar sincroniza√ß√£o ap√≥s cada leitura do ThingSpeak
      this.setupReadingSyncHook();
      
      log('‚úÖ Servi√ßo de sincroniza√ß√£o inicializado com sucesso', 'sync');
    } catch (error) {
      log(`‚ö†Ô∏è Erro ao inicializar servi√ßo de sincroniza√ß√£o: ${error}`, 'sync');
      console.error('Erro na inicializa√ß√£o do servi√ßo de sincroniza√ß√£o:', error);
    }
  }
  
  /**
   * Realiza a sincroniza√ß√£o inicial dos dados
   * Importa os √∫ltimos 3 dias de dados para o banco local (limite reduzido para evitar sobrecarga)
   */
  private async performInitialSync(): Promise<void> {
    if (this.initialSyncComplete) {
      log('üîÑ Sincroniza√ß√£o inicial j√° foi realizada', 'sync');
      return;
    }
    
    try {
      // Limite reduzido para 3 dias para evitar sobrecarga do sistema
      const syncDays = 3;
      log(`üîÑ Executando sincroniza√ß√£o inicial - importando ${syncDays} dias de dados (limitado)`, 'sync');
      
      // Executar a sincroniza√ß√£o com limite de dados
      const count = await syncThingspeakToDatabase(syncDays);
      
      log(`‚úÖ Sincroniza√ß√£o inicial conclu√≠da - ${count} registros importados`, 'sync');
      this.initialSyncComplete = true;
    } catch (error) {
      log(`‚ö†Ô∏è Erro na sincroniza√ß√£o inicial: ${error}`, 'sync');
      console.error('Erro na sincroniza√ß√£o inicial:', error);
    }
  }
  
  /**
   * Configura backup di√°rio dos dados
   */
  private scheduleDailyBackup(): void {
    // Executar todos os dias √†s 03:00 da manh√£
    // Formato cron: segundo minuto hora dia m√™s dia-da-semana
    this.dailyBackupJob = cron.schedule('0 0 3 * * *', async () => {
      try {
        log('üîÑ Iniciando backup di√°rio agendado', 'sync');
        
        // Importar dados do √∫ltimo dia (24 horas)
        const count = await syncThingspeakToDatabase(1);
        
        log(`‚úÖ Backup di√°rio conclu√≠do - ${count} registros importados`, 'sync');
      } catch (error) {
        log(`‚ö†Ô∏è Erro no backup di√°rio: ${error}`, 'sync');
        console.error('Erro no backup di√°rio agendado:', error);
      }
    }, {
      scheduled: true,
      timezone: "America/Sao_Paulo" // Ajustar para o fuso hor√°rio brasileiro
    });
    
    log('üìÖ Backup di√°rio agendado para 03:00 (hor√°rio de Bras√≠lia)', 'sync');
  }
  
  /**
   * Configura sincroniza√ß√£o a cada leitura do ThingSpeak
   * Modifica o fluxo de coleta para atualizar o banco local
   */
  private setupReadingSyncHook(): void {
    // Hook para sincronizar ap√≥s cada leitura do ThingSpeak
    // Este m√©todo √© chamado pelo fetchLatestReading do thingspeakService.ts
    const originalFetchLatestReading = fetchLatestReading;
    
    // Substituir a fun√ß√£o original com uma vers√£o que sincroniza ap√≥s cada chamada
    (global as any).__syncHookEnabled = true;
    
    log('üîó Hook de sincroniza√ß√£o configurado para cada leitura do ThingSpeak', 'sync');
  }
  
  /**
   * Sincroniza imediatamente com o ThingSpeak
   * @param days N√∫mero de dias para sincronizar (padr√£o: 1)
   */
  async syncNow(days: number = 1): Promise<number> {
    try {
      log(`üîÑ Executando sincroniza√ß√£o manual - importando ${days} dias de dados`, 'sync');
      
      const count = await syncThingspeakToDatabase(days);
      
      log(`‚úÖ Sincroniza√ß√£o manual conclu√≠da - ${count} registros importados`, 'sync');
      return count;
    } catch (error) {
      log(`‚ö†Ô∏è Erro na sincroniza√ß√£o manual: ${error}`, 'sync');
      console.error('Erro na sincroniza√ß√£o manual:', error);
      throw error;
    }
  }
  
  /**
   * Pare o servi√ßo de sincroniza√ß√£o
   */
  stop(): void {
    if (this.dailyBackupJob) {
      this.dailyBackupJob.stop();
      this.dailyBackupJob = null;
    }
    
    (global as any).__syncHookEnabled = false;
    
    log('‚èπÔ∏è Servi√ßo de sincroniza√ß√£o parado', 'sync');
  }
  
  /**
   * Obt√©m informa√ß√µes sobre o status atual da sincroniza√ß√£o
   */
  getStatus(): Record<string, any> {
    return {
      initialSyncComplete: this.initialSyncComplete,
      dailyBackupConfigured: !!this.dailyBackupJob,
      hookEnabled: !!(global as any).__syncHookEnabled,
      syncInProgress: !!(global as any).__syncInProgress,
      lastSyncTime: (global as any).__lastSyncTime ? new Date((global as any).__lastSyncTime).toISOString() : null,
      formattedLastSyncTime: (global as any).__lastSyncTime ? 
        new Intl.DateTimeFormat('pt-BR', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
          hour12: false,
          timeZone: 'America/Sao_Paulo'
        }).format(new Date((global as any).__lastSyncTime)) : null
    };
  }
  
  /**
   * M√©todo para verificar se a sincroniza√ß√£o est√° em progresso
   */
  isSyncInProgress(): boolean {
    return !!(global as any).__syncInProgress;
  }
  
  /**
   * M√©todo para obter a data da √∫ltima sincroniza√ß√£o
   */
  getLastSyncTime(): Date | null {
    return (global as any).__lastSyncTime ? new Date((global as any).__lastSyncTime) : null;
  }
}

// Singleton para o servi√ßo de sincroniza√ß√£o
export const syncScheduler = new SyncSchedulerService();