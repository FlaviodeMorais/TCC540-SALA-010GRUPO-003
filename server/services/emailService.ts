import { MailService } from '@sendgrid/mail';

// Configura√ß√£o do servi√ßo de e-mail com SendGrid
if (!process.env.SENDGRID_API_KEY) {
  console.error("‚ö†Ô∏è SENDGRID_API_KEY n√£o configurada. O servi√ßo de e-mail n√£o funcionar√° corretamente.");
}

const mailService = new MailService();
// Garantir que a chave API seja uma string
const apiKey: string = process.env.SENDGRID_API_KEY || '';
mailService.setApiKey(apiKey);

interface EmailParams {
  to: string;
  from: string;
  subject: string;
  text?: string;
  html?: string;
}

/**
 * Envia um e-mail usando o servi√ßo SendGrid
 * @param params Par√¢metros do e-mail: destinat√°rio, remetente, assunto, corpo
 * @returns Promise<boolean> Indica se o e-mail foi enviado com sucesso
 */
export async function sendEmail(params: EmailParams): Promise<boolean> {
  try {
    if (!process.env.SENDGRID_API_KEY) {
      console.error("‚ö†Ô∏è Tentativa de envio de e-mail sem SENDGRID_API_KEY configurada");
      return false;
    }

    const emailData = {
      to: params.to,
      from: params.from,
      subject: params.subject,
      text: params.text || '',
      html: params.html || ''
    } as const;
    
    await mailService.send(emailData);

    console.log(`‚úÖ E-mail enviado com sucesso para ${params.to}`);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao enviar e-mail via SendGrid:', error);
    return false;
  }
}

/**
 * Envia um alerta por e-mail sobre par√¢metros fora dos limites aceit√°veis
 * @param email E-mail do destinat√°rio
 * @param senderEmail E-mail do remetente
 * @param parameter Nome do par√¢metro (temperatura, n√≠vel, etc)
 * @param value Valor atual do par√¢metro
 * @param min Valor m√≠nimo aceit√°vel
 * @param max Valor m√°ximo aceit√°vel
 * @returns Promise<boolean> Indica se o alerta foi enviado com sucesso
 */
export async function sendAlertEmail(
  email: string,
  senderEmail: string,
  parameter: string,
  value: number,
  min: number,
  max: number
): Promise<boolean> {
  const parameterName = parameter.charAt(0).toUpperCase() + parameter.slice(1);
  const subject = `üö® Alerta do Sistema Aquap√¥nico - ${parameterName} fora dos limites`;
  
  const text = `
    Ol√°,

    Seu sistema aquap√¥nico detectou um valor de ${parameterName} fora dos limites aceit√°veis.

    - ${parameterName} atual: ${value}
    - Limite m√≠nimo: ${min}
    - Limite m√°ximo: ${max}

    Recomendamos verificar o seu sistema assim que poss√≠vel.

    Este √© um e-mail automatizado, por favor n√£o responda.
    Sistema de Monitoramento Aquap√¥nico
  `;

  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px;">
      <h2 style="color: #d9534f;">üö® Alerta do Sistema Aquap√¥nico</h2>
      <p>Seu sistema aquap√¥nico detectou um valor de <strong>${parameterName}</strong> fora dos limites aceit√°veis.</p>
      
      <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
        <p><strong>${parameterName} atual:</strong> <span style="color: #d9534f; font-weight: bold;">${value}</span></p>
        <p><strong>Limite m√≠nimo:</strong> ${min}</p>
        <p><strong>Limite m√°ximo:</strong> ${max}</p>
      </div>
      
      <p>Recomendamos verificar o seu sistema assim que poss√≠vel.</p>
      
      <p style="color: #777; font-size: 0.9em; margin-top: 30px; border-top: 1px solid #eee; padding-top: 15px;">
        Este √© um e-mail automatizado, por favor n√£o responda.<br>
        <em>Sistema de Monitoramento Aquap√¥nico</em>
      </p>
    </div>
  `;

  return sendEmail({
    to: email,
    from: senderEmail,
    subject,
    text,
    html
  });
}

/**
 * Envia um relat√≥rio di√°rio por e-mail com as m√©dias de par√¢metros do sistema
 * @param email E-mail do destinat√°rio
 * @param senderEmail E-mail do remetente
 * @param data Dados do relat√≥rio di√°rio
 * @returns Promise<boolean> Indica se o relat√≥rio foi enviado com sucesso
 */
export async function sendDailyReport(
  email: string,
  senderEmail: string,
  data: {
    avgTemperature: number;
    avgLevel: number;
    pumpActiveTimeHours: number;
    heaterActiveTimeHours: number;
    date: string;
  }
): Promise<boolean> {
  const subject = `üìä Relat√≥rio Di√°rio do Sistema Aquap√¥nico - ${data.date}`;
  
  const text = `
    Ol√°,

    Segue o relat√≥rio di√°rio do seu sistema aquap√¥nico para ${data.date}:

    - Temperatura m√©dia: ${data.avgTemperature.toFixed(1)}¬∞C
    - N√≠vel m√©dio: ${data.avgLevel.toFixed(1)}%
    - Tempo de atividade da bomba: ${data.pumpActiveTimeHours.toFixed(1)} horas
    - Tempo de atividade do aquecedor: ${data.heaterActiveTimeHours.toFixed(1)} horas

    Este √© um e-mail automatizado, por favor n√£o responda.
    Sistema de Monitoramento Aquap√¥nico
  `;

  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px;">
      <h2 style="color: #5bc0de;">üìä Relat√≥rio Di√°rio do Sistema Aquap√¥nico</h2>
      <p>Segue o relat√≥rio di√°rio do seu sistema aquap√¥nico para <strong>${data.date}</strong>:</p>
      
      <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
        <p><strong>Temperatura m√©dia:</strong> ${data.avgTemperature.toFixed(1)}¬∞C</p>
        <p><strong>N√≠vel m√©dio:</strong> ${data.avgLevel.toFixed(1)}%</p>
        <p><strong>Tempo de atividade da bomba:</strong> ${data.pumpActiveTimeHours.toFixed(1)} horas</p>
        <p><strong>Tempo de atividade do aquecedor:</strong> ${data.heaterActiveTimeHours.toFixed(1)} horas</p>
      </div>
      
      <p style="color: #777; font-size: 0.9em; margin-top: 30px; border-top: 1px solid #eee; padding-top: 15px;">
        Este √© um e-mail automatizado, por favor n√£o responda.<br>
        <em>Sistema de Monitoramento Aquap√¥nico</em>
      </p>
    </div>
  `;

  return sendEmail({
    to: email,
    from: senderEmail,
    subject,
    text,
    html
  });
}